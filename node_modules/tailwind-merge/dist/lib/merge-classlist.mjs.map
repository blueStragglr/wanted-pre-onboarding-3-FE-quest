{"version":3,"file":"merge-classlist.mjs","sources":["../../src/lib/merge-classlist.ts"],"sourcesContent":["import { ConfigUtils } from './config-utils'\nimport { IMPORTANT_MODIFIER, sortModifiers } from './modifier-utils'\n\nconst SPLIT_CLASSES_REGEX = /\\s+/\n\nexport function mergeClassList(classList: string, configUtils: ConfigUtils) {\n    const { splitModifiers, getClassGroupId, getConflictingClassGroupIds } = configUtils\n\n    /**\n     * Set of classGroupIds in following format:\n     * `{importantModifier}{variantModifiers}{classGroupId}`\n     * @example 'float'\n     * @example 'hover:focus:bg-color'\n     * @example 'md:!pr'\n     */\n    const classGroupsInConflict = new Set<string>()\n\n    return (\n        classList\n            .trim()\n            .split(SPLIT_CLASSES_REGEX)\n            .map((originalClassName) => {\n                const { modifiers, hasImportantModifier, baseClassName } =\n                    splitModifiers(originalClassName)\n\n                const classGroupId = getClassGroupId(baseClassName)\n\n                if (!classGroupId) {\n                    return {\n                        isTailwindClass: false as const,\n                        originalClassName,\n                    }\n                }\n\n                const variantModifier = sortModifiers(modifiers).join(':')\n\n                const modifierId = hasImportantModifier\n                    ? variantModifier + IMPORTANT_MODIFIER\n                    : variantModifier\n\n                return {\n                    isTailwindClass: true as const,\n                    modifierId,\n                    classGroupId,\n                    originalClassName,\n                }\n            })\n            .reverse()\n            // Last class in conflict wins, so we need to filter conflicting classes in reverse order.\n            .filter((parsed) => {\n                if (!parsed.isTailwindClass) {\n                    return true\n                }\n\n                const { modifierId, classGroupId } = parsed\n\n                const classId = modifierId + classGroupId\n\n                if (classGroupsInConflict.has(classId)) {\n                    return false\n                }\n\n                classGroupsInConflict.add(classId)\n\n                getConflictingClassGroupIds(classGroupId).forEach((group) =>\n                    classGroupsInConflict.add(modifierId + group),\n                )\n\n                return true\n            })\n            .reverse()\n            .map((parsed) => parsed.originalClassName)\n            .join(' ')\n    )\n}\n"],"names":["SPLIT_CLASSES_REGEX","mergeClassList","classList","configUtils","splitModifiers","getClassGroupId","getConflictingClassGroupIds","classGroupsInConflict","Set","trim","split","map","originalClassName","modifiers","hasImportantModifier","baseClassName","classGroupId","isTailwindClass","variantModifier","sortModifiers","join","modifierId","IMPORTANT_MODIFIER","reverse","filter","parsed","classId","has","add","forEach","group"],"mappings":";;AAGA,IAAMA,mBAAmB,GAAG,KAAK,CAAA;AAEjB,SAAAC,cAAc,CAACC,SAAiB,EAAEC,WAAwB,EAAA;AACtE,EAAA,IAAQC,cAAc,GAAmDD,WAAW,CAA5EC,cAAc;IAAEC,eAAe,GAAkCF,WAAW,CAA5DE,eAAe;IAAEC,2BAA2B,GAAKH,WAAW,CAA3CG,2BAA2B,CAAA;AAEpE;;;;;;AAMG;AACH,EAAA,IAAMC,qBAAqB,GAAG,IAAIC,GAAG,EAAU,CAAA;AAE/C,EAAA,OACIN,SAAS,CACJO,IAAI,EAAE,CACNC,KAAK,CAACV,mBAAmB,CAAC,CAC1BW,GAAG,CAAC,UAACC,iBAAiB,EAAI;IACvB,IACIR,eAAAA,GAAAA,cAAc,CAACQ,iBAAiB,CAAC;AAD7BC,MAAAA,SAAS,mBAATA,SAAS;AAAEC,MAAAA,oBAAoB,mBAApBA,oBAAoB;AAAEC,MAAAA,aAAa,mBAAbA,aAAa,CAAA;AAGtD,IAAA,IAAMC,YAAY,GAAGX,eAAe,CAACU,aAAa,CAAC,CAAA;IAEnD,IAAI,CAACC,YAAY,EAAE;MACf,OAAO;AACHC,QAAAA,eAAe,EAAE,KAAc;AAC/BL,QAAAA,iBAAiB,EAAjBA,iBAAAA;OACH,CAAA;AACJ,KAAA;IAED,IAAMM,eAAe,GAAGC,aAAa,CAACN,SAAS,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC,CAAA;IAE1D,IAAMC,UAAU,GAAGP,oBAAoB,GACjCI,eAAe,GAAGI,kBAAkB,GACpCJ,eAAe,CAAA;IAErB,OAAO;AACHD,MAAAA,eAAe,EAAE,IAAa;AAC9BI,MAAAA,UAAU,EAAVA,UAAU;AACVL,MAAAA,YAAY,EAAZA,YAAY;AACZJ,MAAAA,iBAAiB,EAAjBA,iBAAAA;KACH,CAAA;GACJ,CAAC,CACDW,OAAO,EAAA;AACR;AAAA,GACCC,MAAM,CAAC,UAACC,MAAM,EAAI;AACf,IAAA,IAAI,CAACA,MAAM,CAACR,eAAe,EAAE;AACzB,MAAA,OAAO,IAAI,CAAA;AACd,KAAA;AAED,IAAA,IAAQI,UAAU,GAAmBI,MAAM,CAAnCJ,UAAU;MAAEL,YAAY,GAAKS,MAAM,CAAvBT,YAAY,CAAA;AAEhC,IAAA,IAAMU,OAAO,GAAGL,UAAU,GAAGL,YAAY,CAAA;AAEzC,IAAA,IAAIT,qBAAqB,CAACoB,GAAG,CAACD,OAAO,CAAC,EAAE;AACpC,MAAA,OAAO,KAAK,CAAA;AACf,KAAA;AAEDnB,IAAAA,qBAAqB,CAACqB,GAAG,CAACF,OAAO,CAAC,CAAA;AAElCpB,IAAAA,2BAA2B,CAACU,YAAY,CAAC,CAACa,OAAO,CAAC,UAACC,KAAK,EAAA;AAAA,MAAA,OACpDvB,qBAAqB,CAACqB,GAAG,CAACP,UAAU,GAAGS,KAAK,CAAC,CAAA;KAChD,CAAA,CAAA;AAED,IAAA,OAAO,IAAI,CAAA;GACd,CAAC,CACDP,OAAO,EAAE,CACTZ,GAAG,CAAC,UAACc,MAAM,EAAA;IAAA,OAAKA,MAAM,CAACb,iBAAiB,CAAA;AAAA,GAAA,CAAC,CACzCQ,IAAI,CAAC,GAAG,CAAC,CAAA;AAEtB;;;;"}