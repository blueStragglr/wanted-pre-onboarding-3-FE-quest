{"version":3,"file":"modifier-utils.mjs","sources":["../../src/lib/modifier-utils.ts"],"sourcesContent":["import { Config } from './types'\n\nexport const IMPORTANT_MODIFIER = '!'\n\nexport function createSplitModifiers(config: Config) {\n    const separator = config.separator || ':'\n\n    // splitModifiers inspired by https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js\n    return function splitModifiers(className: string) {\n        let bracketDepth = 0\n        let modifiers = []\n        let modifierStart = 0\n\n        for (let index = 0; index < className.length; index++) {\n            let char = className[index]\n\n            if (bracketDepth === 0 && char === separator[0]) {\n                if (\n                    separator.length === 1 ||\n                    className.slice(index, index + separator.length) === separator\n                ) {\n                    modifiers.push(className.slice(modifierStart, index))\n                    modifierStart = index + separator.length\n                }\n            }\n\n            if (char === '[') {\n                bracketDepth++\n            } else if (char === ']') {\n                bracketDepth--\n            }\n        }\n\n        const baseClassNameWithImportantModifier =\n            modifiers.length === 0 ? className : className.substring(modifierStart)\n        const hasImportantModifier =\n            baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER)\n        const baseClassName = hasImportantModifier\n            ? baseClassNameWithImportantModifier.substring(1)\n            : baseClassNameWithImportantModifier\n\n        return {\n            modifiers,\n            hasImportantModifier,\n            baseClassName,\n        }\n    }\n}\n\n/**\n * Sorts modifiers according to following schema:\n * - Predefined modifiers are sorted alphabetically\n * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it\n */\nexport function sortModifiers(modifiers: string[]) {\n    if (modifiers.length <= 1) {\n        return modifiers\n    }\n\n    const sortedModifiers: string[] = []\n    let unsortedModifiers: string[] = []\n\n    modifiers.forEach((modifier) => {\n        const isArbitraryVariant = modifier[0] === '['\n\n        if (isArbitraryVariant) {\n            sortedModifiers.push(...unsortedModifiers.sort(), modifier)\n            unsortedModifiers = []\n        } else {\n            unsortedModifiers.push(modifier)\n        }\n    })\n\n    sortedModifiers.push(...unsortedModifiers.sort())\n\n    return sortedModifiers\n}\n"],"names":["IMPORTANT_MODIFIER","createSplitModifiers","config","separator","splitModifiers","className","bracketDepth","modifiers","modifierStart","index","length","char","slice","push","baseClassNameWithImportantModifier","substring","hasImportantModifier","startsWith","baseClassName","sortModifiers","sortedModifiers","unsortedModifiers","forEach","modifier","isArbitraryVariant","sort"],"mappings":"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"}