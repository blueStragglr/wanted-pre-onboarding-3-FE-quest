{"ast":null,"code":"var arbitraryValueRegex = /^\\[(?:([a-z-]+):)?(.+)\\]$/i;\nvar fractionRegex = /^\\d+\\/\\d+$/;\nvar stringLengths = /*#__PURE__*/new Set(['px', 'full', 'screen']);\nvar tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\nvar lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh)/;\n// Shadow always begins with x and y offset separated by underscore\nvar shadowRegex = /^-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nfunction isLength(value) {\n  return isNumber(value) || stringLengths.has(value) || fractionRegex.test(value) || isArbitraryLength(value);\n}\nfunction isArbitraryLength(value) {\n  return getIsArbitraryValue(value, 'length', isLengthOnly);\n}\nfunction isArbitrarySize(value) {\n  return getIsArbitraryValue(value, 'size', isNever);\n}\nfunction isArbitraryPosition(value) {\n  return getIsArbitraryValue(value, 'position', isNever);\n}\nfunction isArbitraryUrl(value) {\n  return getIsArbitraryValue(value, 'url', isUrl);\n}\nfunction isArbitraryNumber(value) {\n  return getIsArbitraryValue(value, 'number', isNumber);\n}\n/**\r\n * @deprecated Will be removed in next major version. Use `isArbitraryNumber` instead.\r\n */\nvar isArbitraryWeight = isArbitraryNumber;\nfunction isNumber(value) {\n  return !Number.isNaN(Number(value));\n}\nfunction isInteger(value) {\n  return isIntegerOnly(value) || getIsArbitraryValue(value, 'number', isIntegerOnly);\n}\nfunction isArbitraryValue(value) {\n  return arbitraryValueRegex.test(value);\n}\nfunction isAny() {\n  return true;\n}\nfunction isTshirtSize(value) {\n  return tshirtUnitRegex.test(value);\n}\nfunction isArbitraryShadow(value) {\n  return getIsArbitraryValue(value, '', isShadow);\n}\nfunction getIsArbitraryValue(value, label, testValue) {\n  var result = arbitraryValueRegex.exec(value);\n  if (result) {\n    if (result[1]) {\n      return result[1] === label;\n    }\n    return testValue(result[2]);\n  }\n  return false;\n}\nfunction isLengthOnly(value) {\n  return lengthUnitRegex.test(value);\n}\nfunction isNever() {\n  return false;\n}\nfunction isUrl(value) {\n  return value.startsWith('url(');\n}\nfunction isIntegerOnly(value) {\n  return Number.isInteger(Number(value));\n}\nfunction isShadow(value) {\n  return shadowRegex.test(value);\n}\nexport { isAny, isArbitraryLength, isArbitraryNumber, isArbitraryPosition, isArbitraryShadow, isArbitrarySize, isArbitraryUrl, isArbitraryValue, isArbitraryWeight, isInteger, isLength, isNumber, isTshirtSize };","map":{"version":3,"mappings":"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","names":["arbitraryValueRegex","fractionRegex","stringLengths","Set","tshirtUnitRegex","lengthUnitRegex","shadowRegex","isLength","value","isNumber","has","test","isArbitraryLength","getIsArbitraryValue","isLengthOnly","isArbitrarySize","isNever","isArbitraryPosition","isArbitraryUrl","isUrl","isArbitraryNumber","isArbitraryWeight","Number","isNaN","isInteger","isIntegerOnly","isArbitraryValue","isAny","isTshirtSize","isArbitraryShadow","isShadow","label","testValue","result","exec","startsWith"],"sources":["/Users/johyeyeon/so-hyeppy/node_modules/tailwind-merge/src/lib/validators.ts"],"sourcesContent":["const arbitraryValueRegex = /^\\[(?:([a-z-]+):)?(.+)\\]$/i\nconst fractionRegex = /^\\d+\\/\\d+$/\nconst stringLengths = new Set(['px', 'full', 'screen'])\nconst tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/\nconst lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh)/\n// Shadow always begins with x and y offset separated by underscore\nconst shadowRegex = /^-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/\n\nexport function isLength(value: string) {\n    return (\n        isNumber(value) ||\n        stringLengths.has(value) ||\n        fractionRegex.test(value) ||\n        isArbitraryLength(value)\n    )\n}\n\nexport function isArbitraryLength(value: string) {\n    return getIsArbitraryValue(value, 'length', isLengthOnly)\n}\n\nexport function isArbitrarySize(value: string) {\n    return getIsArbitraryValue(value, 'size', isNever)\n}\n\nexport function isArbitraryPosition(value: string) {\n    return getIsArbitraryValue(value, 'position', isNever)\n}\n\nexport function isArbitraryUrl(value: string) {\n    return getIsArbitraryValue(value, 'url', isUrl)\n}\n\nexport function isArbitraryNumber(value: string) {\n    return getIsArbitraryValue(value, 'number', isNumber)\n}\n\n/**\n * @deprecated Will be removed in next major version. Use `isArbitraryNumber` instead.\n */\nexport const isArbitraryWeight = isArbitraryNumber\n\nexport function isNumber(value: string) {\n    return !Number.isNaN(Number(value))\n}\n\nexport function isInteger(value: string) {\n    return isIntegerOnly(value) || getIsArbitraryValue(value, 'number', isIntegerOnly)\n}\n\nexport function isArbitraryValue(value: string) {\n    return arbitraryValueRegex.test(value)\n}\n\nexport function isAny() {\n    return true\n}\n\nexport function isTshirtSize(value: string) {\n    return tshirtUnitRegex.test(value)\n}\n\nexport function isArbitraryShadow(value: string) {\n    return getIsArbitraryValue(value, '', isShadow)\n}\n\nfunction getIsArbitraryValue(value: string, label: string, testValue: (value: string) => boolean) {\n    const result = arbitraryValueRegex.exec(value)\n\n    if (result) {\n        if (result[1]) {\n            return result[1] === label\n        }\n\n        return testValue(result[2]!)\n    }\n\n    return false\n}\n\nfunction isLengthOnly(value: string) {\n    return lengthUnitRegex.test(value)\n}\n\nfunction isNever() {\n    return false\n}\n\nfunction isUrl(value: string) {\n    return value.startsWith('url(')\n}\n\nfunction isIntegerOnly(value: string) {\n    return Number.isInteger(Number(value))\n}\n\nfunction isShadow(value: string) {\n    return shadowRegex.test(value)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}