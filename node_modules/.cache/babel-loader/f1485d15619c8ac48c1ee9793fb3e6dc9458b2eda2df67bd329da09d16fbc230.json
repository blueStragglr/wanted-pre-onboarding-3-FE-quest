{"ast":null,"code":"var _jsxFileName = \"/Users/johyeyeon/so-hyeppy/src/Pages/Intro/Login.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { User, LoginState } from '../../Atom/Atoms';\nimport styled from 'styled-components';\nimport Button from '../../Components/Button';\nimport { useCookies } from 'react-cookie'; // useCookies import\nimport { useNavigate } from 'react-router';\n\n/***\n * 로그인을 유지하는 방법은 여러가지인것 같다.\n * 어떤것이 좋은 방법일까? 리코일을 사용해보기로해서 recoil-persist로 유지시켜볼까한다.\n * 1. 토큰,로컬스토리지,리코일퍼시스트(recoil-persist)\n * recoil-persist도 결국은 localStorage에 보관된다.\n * ***/\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IntroLogin = () => {\n  _s();\n  const [cookies, setCookie, removeCookie] = useCookies(['id']); //쿠키\n  const [user, setUser] = useRecoilState(User);\n  const [isLoggedIn, setIsLoggedIn] = useRecoilState(LoginState);\n  const navigate = useNavigate();\n\n  // 로그인 입력한 정보담기\n  const [inputData, setInputData] = useState({\n    userId: '',\n    userPw: ''\n  });\n  removeCookie('id');\n  const {\n    userId,\n    userPw\n  } = inputData;\n  const onChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    const nextInputs = {\n      ...inputData,\n      [name]: value\n    };\n    setInputData(nextInputs);\n  };\n  const insertedToken = localStorage.getItem('access_token');\n  const onClick = () => {\n    if (api(user)) {\n      console.log('페이지 이동');\n      setIsLoggedIn(true); // recoil-persist => localStorage에 저장\n      navigate('/');\n      /*** 토큰,localStorage 저장해보기 ***/\n      // const token = cookies.id;\n      // setCookie('id', 'loginOk'); // 쿠키에 토큰 저장\n      // localStorage.setItem('access_token', 'loginOk'); // localStorage에 토큰저장 실제는 loginOk 아니고 응답값을 저장해야함\n    } else {\n      console.log('로그인실패');\n      alert('로그인 실패: id: admin & password: pw 를 입력해야 넘어감');\n    }\n  };\n  const api = reqUser => {\n    //api\n    console.log('inputData', inputData);\n    if (reqUser.id === inputData.userId && reqUser.pwd === inputData.userPw) {\n      console.log('맞다');\n      return true;\n    } else {\n      console.log('아니다');\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Login, {\n      children: /*#__PURE__*/_jsxDEV(LoginBox, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"font-bold text-[18px] mb-[20px]\",\n          children: \"\\uB85C\\uADF8\\uC778\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StyledInput, {\n          className: \"input mb-[10px]\",\n          name: \"userId\",\n          value: userId,\n          placeholder: \"\\uC544\\uC774\\uB514\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\",\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StyledInput, {\n          className: \"input mb-[10px]\",\n          name: \"userPw\",\n          value: userPw,\n          placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\",\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"h-[40px] rounded-[5px] bg-[#2083F8] leading-[15px]\",\n          onClick: onClick,\n          children: \"\\uB85C\\uADF8\\uC778\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(IntroLogin, \"ZonLoCs/64H2TgFItjHklrUcnVM=\", false, function () {\n  return [useCookies, useRecoilState, useRecoilState, useNavigate];\n});\n_c = IntroLogin;\nconst Login = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: auto;\n  min-height: 100vh;\n  background-color: #1367ca;\n`;\n_c2 = Login;\nconst LoginBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 456px;\n  background-color: #fff;\n  border-radius: 8px;\n  padding: 50px;\n`;\n_c3 = LoginBox;\nconst StyledInput = styled.input`\n  border: 1px solid #dcdcdd;\n  background-color: #fff;\n  padding: 10px 15px;\n`;\n_c4 = StyledInput;\nexport default IntroLogin;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"IntroLogin\");\n$RefreshReg$(_c2, \"Login\");\n$RefreshReg$(_c3, \"LoginBox\");\n$RefreshReg$(_c4, \"StyledInput\");","map":{"version":3,"names":["React","useState","useRecoilState","User","LoginState","styled","Button","useCookies","useNavigate","IntroLogin","cookies","setCookie","removeCookie","user","setUser","isLoggedIn","setIsLoggedIn","navigate","inputData","setInputData","userId","userPw","onChange","event","value","name","target","nextInputs","insertedToken","localStorage","getItem","onClick","api","console","log","alert","reqUser","id","pwd","Login","div","LoginBox","StyledInput","input"],"sources":["/Users/johyeyeon/so-hyeppy/src/Pages/Intro/Login.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { RecoilRootProps, useRecoilValue, useRecoilState, atom } from 'recoil';\nimport { IUser, User, LoginState } from '../../Atom/Atoms';\nimport styled from 'styled-components';\nimport Button from '../../Components/Button';\nimport { useCookies } from 'react-cookie'; // useCookies import\nimport { useNavigate } from 'react-router';\n\n/***\n * 로그인을 유지하는 방법은 여러가지인것 같다.\n * 어떤것이 좋은 방법일까? 리코일을 사용해보기로해서 recoil-persist로 유지시켜볼까한다.\n * 1. 토큰,로컬스토리지,리코일퍼시스트(recoil-persist)\n * recoil-persist도 결국은 localStorage에 보관된다.\n * ***/\n\nconst IntroLogin = () => {\n  const [cookies, setCookie, removeCookie] = useCookies(['id']); //쿠키\n  const [user, setUser] = useRecoilState<IUser>(User);\n  const [isLoggedIn, setIsLoggedIn] = useRecoilState(LoginState);\n  const navigate = useNavigate();\n\n  // 로그인 입력한 정보담기\n  const [inputData, setInputData] = useState<any>({\n    userId: '',\n    userPw: '',\n  });\n\n  removeCookie('id');\n\n  const { userId, userPw } = inputData;\n  const onChange = (event: any) => {\n    const { value, name } = event.target;\n    const nextInputs = {\n      ...inputData,\n      [name]: value,\n    };\n    setInputData(nextInputs);\n  };\n\n  const insertedToken = localStorage.getItem('access_token');\n  const onClick = () => {\n    if (api(user)) {\n      console.log('페이지 이동');\n      setIsLoggedIn(true); // recoil-persist => localStorage에 저장\n      navigate('/');\n      /*** 토큰,localStorage 저장해보기 ***/\n      // const token = cookies.id;\n      // setCookie('id', 'loginOk'); // 쿠키에 토큰 저장\n      // localStorage.setItem('access_token', 'loginOk'); // localStorage에 토큰저장 실제는 loginOk 아니고 응답값을 저장해야함\n    } else {\n      console.log('로그인실패');\n      alert('로그인 실패: id: admin & password: pw 를 입력해야 넘어감');\n    }\n  };\n\n  const api = (reqUser: IUser) => {\n    //api\n    console.log('inputData', inputData);\n    if (reqUser.id === inputData.userId && reqUser.pwd === inputData.userPw) {\n      console.log('맞다');\n      return true;\n    } else {\n      console.log('아니다');\n      return false;\n    }\n  };\n\n  return (\n      <>\n        <Login>\n          <LoginBox>\n            <div className=\"font-bold text-[18px] mb-[20px]\">로그인</div>\n            <StyledInput\n                className=\"input mb-[10px]\"\n                name=\"userId\"\n                value={userId}\n                placeholder=\"아이디를 입력하세요\"\n                onChange={onChange}\n            />\n            <StyledInput\n                className=\"input mb-[10px]\"\n                name=\"userPw\"\n                value={userPw}\n                placeholder=\"비밀번호를 입력하세요\"\n                onChange={onChange}\n            />\n            <Button className=\"h-[40px] rounded-[5px] bg-[#2083F8] leading-[15px]\" onClick={onClick}>\n              로그인\n            </Button>\n          </LoginBox>\n        </Login>\n      </>\n  );\n};\n\nconst Login = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: auto;\n  min-height: 100vh;\n  background-color: #1367ca;\n`;\nconst LoginBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 456px;\n  background-color: #fff;\n  border-radius: 8px;\n  padding: 50px;\n`;\n\nconst StyledInput = styled.input`\n  border: 1px solid #dcdcdd;\n  background-color: #fff;\n  padding: 10px 15px;\n`;\nexport default IntroLogin;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}