{"ast":null,"code":"var _jsxFileName = \"/Users/johyeyeon/so-hyeppy/src/Pages/Layout/Nav.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport tw from 'tailwind-styled-components';\nimport { useNavigate, useLocation, NavLink } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Nav = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [active, setActive] = useState();\n\n  // 네브바 클릭 시 useNavigate 로 페이지 이동이 적절한가?\n  // 어떤 방법으로 이동 시키는 것이 좋을지 고민해봐야한다.\n  //useNavigate는 양식이 제출되거나 특정 event가 발생할 때,  url을 조작할 수 있는 interface를 제공합니다.\n  //useNavigate는 react v6 에서 useHistory 가 변화한 것입니다\n  //이 때 useHistory 에서 사용하던, window의 history 를 이용한 navigate 기능도 할 수 있게 되었습니다.\n\n  return /*#__PURE__*/_jsxDEV(NavWrap, {\n    children: NAV_ITEMS.map(_ref => {\n      let {\n        id,\n        name,\n        path\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(NavLink, {\n        to: `${path}`,\n        className: _ref2 => {\n          let {\n            isActive\n          } = _ref2;\n          return isActive ? 'navLink is_active' : 'navLink';\n        },\n        children: name\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_s(Nav, \"gbMfaMvvBapoEfz8zFZfaguq1FU=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Nav;\nconst NAV_ITEMS = [{\n  id: 1,\n  name: '홈',\n  path: '/'\n}, {\n  id: 2,\n  name: '근무/휴가',\n  path: '/Attendance'\n}];\nconst NavWrap = tw.ul`\n  flex ml-[50px];\n`;\n_c2 = NavWrap;\nexport default Nav;\nvar _c, _c2;\n$RefreshReg$(_c, \"Nav\");\n$RefreshReg$(_c2, \"NavWrap\");","map":{"version":3,"names":["React","useState","tw","useNavigate","useLocation","NavLink","Nav","navigate","location","active","setActive","NAV_ITEMS","map","id","name","path","isActive","NavWrap","ul"],"sources":["/Users/johyeyeon/so-hyeppy/src/Pages/Layout/Nav.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport tw from 'tailwind-styled-components';\nimport { useNavigate, useLocation, NavLink } from 'react-router-dom';\nconst Nav: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [active, setActive] = useState<any>();\n\n  // 네브바 클릭 시 useNavigate 로 페이지 이동이 적절한가?\n  // 어떤 방법으로 이동 시키는 것이 좋을지 고민해봐야한다.\n  //useNavigate는 양식이 제출되거나 특정 event가 발생할 때,  url을 조작할 수 있는 interface를 제공합니다.\n  //useNavigate는 react v6 에서 useHistory 가 변화한 것입니다\n  //이 때 useHistory 에서 사용하던, window의 history 를 이용한 navigate 기능도 할 수 있게 되었습니다.\n\n  return (\n    <NavWrap>\n      {NAV_ITEMS.map(({ id, name, path }) => {\n        return (\n          <NavLink to={`${path}`} key={id} className={({ isActive }) => (isActive ? 'navLink is_active' : 'navLink')}>\n            {name}\n          </NavLink>\n        );\n      })}\n    </NavWrap>\n  );\n};\n\nconst NAV_ITEMS = [\n  {\n    id: 1,\n    name: '홈',\n    path: '/',\n  },\n  {\n    id: 2,\n    name: '근무/휴가',\n    path: '/Attendance',\n  },\n];\n\nconst NavWrap = tw.ul`\n  flex ml-[50px];\n`;\nexport default Nav;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAeC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,4BAA4B;AAC3C,SAASC,WAAW,EAAEC,WAAW,EAAEC,OAAO,QAAQ,kBAAkB;AAAC;AACrE,MAAMC,GAAa,GAAG,MAAM;EAAA;EAC1B,MAAMC,QAAQ,GAAGJ,WAAW,EAAE;EAC9B,MAAMK,QAAQ,GAAGJ,WAAW,EAAE;EAC9B,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,EAAO;;EAE3C;EACA;EACA;EACA;EACA;;EAEA,oBACE,QAAC,OAAO;IAAA,UACLU,SAAS,CAACC,GAAG,CAAC,QAAwB;MAAA,IAAvB;QAAEC,EAAE;QAAEC,IAAI;QAAEC;MAAK,CAAC;MAChC,oBACE,QAAC,OAAO;QAAC,EAAE,EAAG,GAAEA,IAAK,EAAE;QAAU,SAAS,EAAE;UAAA,IAAC;YAAEC;UAAS,CAAC;UAAA,OAAMA,QAAQ,GAAG,mBAAmB,GAAG,SAAS;QAAA,CAAE;QAAA,UACxGF;MAAI,GADsBD,EAAE;QAAA;QAAA;QAAA;MAAA,QAErB;IAEd,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QACM;AAEd,CAAC;AAAC,GAtBIP,GAAa;EAAA,QACAH,WAAW,EACXC,WAAW;AAAA;AAAA,KAFxBE,GAAa;AAwBnB,MAAMK,SAAS,GAAG,CAChB;EACEE,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE;AACR,CAAC,EACD;EACEF,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE;AACR,CAAC,CACF;AAED,MAAME,OAAO,GAAGf,EAAE,CAACgB,EAAG;AACtB;AACA,CAAC;AAAC,MAFID,OAAO;AAGb,eAAeX,GAAG;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}