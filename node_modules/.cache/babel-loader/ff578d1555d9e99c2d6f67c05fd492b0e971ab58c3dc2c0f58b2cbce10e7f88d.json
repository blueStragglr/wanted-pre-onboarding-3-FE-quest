{"ast":null,"code":"import { sortModifiers, IMPORTANT_MODIFIER } from './modifier-utils.mjs';\nvar SPLIT_CLASSES_REGEX = /\\s+/;\nfunction mergeClassList(classList, configUtils) {\n  var splitModifiers = configUtils.splitModifiers,\n    getClassGroupId = configUtils.getClassGroupId,\n    getConflictingClassGroupIds = configUtils.getConflictingClassGroupIds;\n  /**\r\n   * Set of classGroupIds in following format:\r\n   * `{importantModifier}{variantModifiers}{classGroupId}`\r\n   * @example 'float'\r\n   * @example 'hover:focus:bg-color'\r\n   * @example 'md:!pr'\r\n   */\n  var classGroupsInConflict = new Set();\n  return classList.trim().split(SPLIT_CLASSES_REGEX).map(function (originalClassName) {\n    var _splitModifiers = splitModifiers(originalClassName),\n      modifiers = _splitModifiers.modifiers,\n      hasImportantModifier = _splitModifiers.hasImportantModifier,\n      baseClassName = _splitModifiers.baseClassName;\n    var classGroupId = getClassGroupId(baseClassName);\n    if (!classGroupId) {\n      return {\n        isTailwindClass: false,\n        originalClassName: originalClassName\n      };\n    }\n    var variantModifier = sortModifiers(modifiers).join(':');\n    var modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n    return {\n      isTailwindClass: true,\n      modifierId: modifierId,\n      classGroupId: classGroupId,\n      originalClassName: originalClassName\n    };\n  }).reverse()\n  // Last class in conflict wins, so we need to filter conflicting classes in reverse order.\n  .filter(function (parsed) {\n    if (!parsed.isTailwindClass) {\n      return true;\n    }\n    var modifierId = parsed.modifierId,\n      classGroupId = parsed.classGroupId;\n    var classId = modifierId + classGroupId;\n    if (classGroupsInConflict.has(classId)) {\n      return false;\n    }\n    classGroupsInConflict.add(classId);\n    getConflictingClassGroupIds(classGroupId).forEach(function (group) {\n      return classGroupsInConflict.add(modifierId + group);\n    });\n    return true;\n  }).reverse().map(function (parsed) {\n    return parsed.originalClassName;\n  }).join(' ');\n}\nexport { mergeClassList };","map":{"version":3,"mappings":";AAGA,IAAMA,mBAAmB,GAAG,KAAK;AAEjB,uBAAc,CAACC,SAAiB,EAAEC,WAAwB;EACtE,IAAQC,cAAc,GAAmDD,WAAW,CAA5EC,cAAc;IAAEC,eAAe,GAAkCF,WAAW,CAA5DE,eAAe;IAAEC,2BAA2B,GAAKH,WAAW,CAA3CG,2BAA2B;EAEpE;;;;;;AAMG;EACH,IAAMC,qBAAqB,GAAG,IAAIC,GAAG,EAAU;EAE/C,OACIN,SAAS,CACJO,IAAI,EAAE,CACNC,KAAK,CAACT,mBAAmB,CAAC,CAC1BU,GAAG,CAAC,UAACC,iBAAiB,EAAI;IACvB,IACIR,gCAAc,CAACQ,iBAAiB,CAAC;MAD7BC,SAAS,mBAATA,SAAS;MAAEC,oBAAoB,mBAApBA,oBAAoB;MAAEC,aAAa,mBAAbA,aAAa;IAGtD,IAAMC,YAAY,GAAGX,eAAe,CAACU,aAAa,CAAC;IAEnD,IAAI,CAACC,YAAY,EAAE;MACf,OAAO;QACHC,eAAe,EAAE,KAAc;QAC/BL,iBAAiB,EAAjBA;OACH;IACJ;IAED,IAAMM,eAAe,GAAGC,aAAa,CAACN,SAAS,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC;IAE1D,IAAMC,UAAU,GAAGP,oBAAoB,GACjCI,eAAe,GAAGI,kBAAkB,GACpCJ,eAAe;IAErB,OAAO;MACHD,eAAe,EAAE,IAAa;MAC9BI,UAAU,EAAVA,UAAU;MACVL,YAAY,EAAZA,YAAY;MACZJ,iBAAiB,EAAjBA;KACH;GACJ,CAAC,CACDW,OAAO;EACR;EAAA,CACCC,MAAM,CAAC,UAACC,MAAM,EAAI;IACf,IAAI,CAACA,MAAM,CAACR,eAAe,EAAE;MACzB,OAAO,IAAI;IACd;IAED,IAAQI,UAAU,GAAmBI,MAAM,CAAnCJ,UAAU;MAAEL,YAAY,GAAKS,MAAM,CAAvBT,YAAY;IAEhC,IAAMU,OAAO,GAAGL,UAAU,GAAGL,YAAY;IAEzC,IAAIT,qBAAqB,CAACoB,GAAG,CAACD,OAAO,CAAC,EAAE;MACpC,OAAO,KAAK;IACf;IAEDnB,qBAAqB,CAACqB,GAAG,CAACF,OAAO,CAAC;IAElCpB,2BAA2B,CAACU,YAAY,CAAC,CAACa,OAAO,CAAC,UAACC,KAAK;MAAA,OACpDvB,qBAAqB,CAACqB,GAAG,CAACP,UAAU,GAAGS,KAAK,CAAC;KAChD;IAED,OAAO,IAAI;GACd,CAAC,CACDP,OAAO,EAAE,CACTZ,GAAG,CAAC,UAACc,MAAM;IAAA,OAAKA,MAAM,CAACb,iBAAiB;EAAA,EAAC,CACzCQ,IAAI,CAAC,GAAG,CAAC;AAEtB","names":["SPLIT_CLASSES_REGEX","classList","configUtils","splitModifiers","getClassGroupId","getConflictingClassGroupIds","classGroupsInConflict","Set","trim","split","map","originalClassName","modifiers","hasImportantModifier","baseClassName","classGroupId","isTailwindClass","variantModifier","sortModifiers","join","modifierId","IMPORTANT_MODIFIER","reverse","filter","parsed","classId","has","add","forEach","group"],"sources":["/Users/johyeyeon/so-hyeppy/node_modules/tailwind-merge/src/lib/merge-classlist.ts"],"sourcesContent":["import { ConfigUtils } from './config-utils'\nimport { IMPORTANT_MODIFIER, sortModifiers } from './modifier-utils'\n\nconst SPLIT_CLASSES_REGEX = /\\s+/\n\nexport function mergeClassList(classList: string, configUtils: ConfigUtils) {\n    const { splitModifiers, getClassGroupId, getConflictingClassGroupIds } = configUtils\n\n    /**\n     * Set of classGroupIds in following format:\n     * `{importantModifier}{variantModifiers}{classGroupId}`\n     * @example 'float'\n     * @example 'hover:focus:bg-color'\n     * @example 'md:!pr'\n     */\n    const classGroupsInConflict = new Set<string>()\n\n    return (\n        classList\n            .trim()\n            .split(SPLIT_CLASSES_REGEX)\n            .map((originalClassName) => {\n                const { modifiers, hasImportantModifier, baseClassName } =\n                    splitModifiers(originalClassName)\n\n                const classGroupId = getClassGroupId(baseClassName)\n\n                if (!classGroupId) {\n                    return {\n                        isTailwindClass: false as const,\n                        originalClassName,\n                    }\n                }\n\n                const variantModifier = sortModifiers(modifiers).join(':')\n\n                const modifierId = hasImportantModifier\n                    ? variantModifier + IMPORTANT_MODIFIER\n                    : variantModifier\n\n                return {\n                    isTailwindClass: true as const,\n                    modifierId,\n                    classGroupId,\n                    originalClassName,\n                }\n            })\n            .reverse()\n            // Last class in conflict wins, so we need to filter conflicting classes in reverse order.\n            .filter((parsed) => {\n                if (!parsed.isTailwindClass) {\n                    return true\n                }\n\n                const { modifierId, classGroupId } = parsed\n\n                const classId = modifierId + classGroupId\n\n                if (classGroupsInConflict.has(classId)) {\n                    return false\n                }\n\n                classGroupsInConflict.add(classId)\n\n                getConflictingClassGroupIds(classGroupId).forEach((group) =>\n                    classGroupsInConflict.add(modifierId + group),\n                )\n\n                return true\n            })\n            .reverse()\n            .map((parsed) => parsed.originalClassName)\n            .join(' ')\n    )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}