{
  "version": 3,
  "sources": ["../src/index.ts", "../src/tailwind.tsx", "../src/domElements.ts"],
  "sourcesContent": ["import tw from \"./tailwind\"\n\nexport { tw as default }\n", "import React, { CSSProperties } from \"react\"\nimport domElements from \"./domElements\"\nimport { twMerge } from \"tailwind-merge\"\n\nconst isTwElement = Symbol(\"isTwElement?\")\n\nexport type IsTwElement = { [isTwElement]: true }\nexport type FalseyValue = undefined | null | false\n\nexport type FlattenInterpolation<P> = ReadonlyArray<Interpolation<P>>\nexport type InterpolationValue = string | number | FalseyValue | TailwindComponentInterpolation\n\nexport type Interpolation<P> = InterpolationValue | InterpolationFunction<P> | FlattenInterpolation<P>\n\nexport type InterpolationFunction<P> = (props: P) => Interpolation<P>\ntype TailwindComponentInterpolation = PickU<TailwindComponentBase<any, any>, keyof TailwindComponentBase<any, any>>\n\ntype IntrinsicElementsKeys = keyof JSX.IntrinsicElements\n\ntype IsAny<T, True, False = never> = True | False extends (T extends never ? True : False) ? True : False\n\nexport const mergeArrays = (template: TemplateStringsArray, templateElements: (string | undefined | null)[]) => {\n    return template.reduce(\n        (acc, c, i) => acc.concat(c || [], templateElements[i] || []), //  x || [] to remove false values e.g '', null, undefined. as Array.concat() ignores empty arrays i.e []\n        [] as string[]\n    )\n}\n\nexport const cleanTemplate = (template: Array<Interpolation<any>>, inheritedClasses: string = \"\") => {\n    const newClasses: string[] = template\n        .join(\" \")\n        .trim()\n        .replace(/\\n/g, \" \") // replace newline with space\n        .replace(/\\s{2,}/g, \" \") // replace line return by space\n        .split(\" \")\n        .filter((c) => c !== \",\") // remove comma introduced by template to string\n\n    const inheritedClassesArray: string[] = inheritedClasses ? inheritedClasses.split(\" \") : []\n\n    return twMerge(\n        ...newClasses\n            .concat(inheritedClassesArray) // add new classes to inherited classes\n            .filter((c: string) => c !== \" \") // remove empty classes\n    )\n}\n\nexport type PickU<T, K extends keyof T> = T extends any ? { [P in K]: T[P] } : never\n// export type OmitU<T, K extends keyof T> = T extends any ? PickU<T, Exclude<keyof T, K>> : never\nexport type RemoveIndex<T> = {\n    [K in keyof T as string extends K ? never : number extends K ? never : K]: T[K]\n}\n\n/**\n * ForwardRef typings\n */\nexport type TailwindExoticComponent<P> = PickU<\n    React.ForwardRefExoticComponent<P>,\n    keyof React.ForwardRefExoticComponent<any>\n>\n\ntype MergeProps<O extends object, P extends {} = {}> =\n    // Distribute unions early to avoid quadratic expansion\n    P extends any ? IsAny<P, RemoveIndex<P> & O, P & O> : never\n// RemoveIndex<P> is used to make React.ComponentPropsWithRef typesafe on Tailwind components, delete if causing issues\n\ntype TailwindPropHelper<\n    P,\n    O extends object = {}\n    // PickU is needed here to make $as typing work\n> = PickU<MergeProps<O, P>, keyof MergeProps<O, P>>\n\ntype TailwindComponentPropsWith$As<\n    P extends object,\n    O extends object,\n    $As extends string | React.ComponentType<any> = React.ComponentType<P>,\n    P2 = $As extends AnyTailwindComponent\n        ? TailwindComponentAllInnerProps<$As>\n        : $As extends IntrinsicElementsKeys | React.ComponentType<any>\n        ? React.ComponentPropsWithRef<$As>\n        : never\n> = P & O & TailwindPropHelper<P2> & { $as?: $As }\n\n/**\n * An interface represent a component styled by tailwind-styled-components\n *\n * @export\n * @interface TailwindComponent\n * @template P The base react props\n * @template O The props added with the template function.\n */\nexport type TailwindComponent<P extends object, O extends object = {}> = IsTwElement &\n    TailwindComponentBase<P, O> &\n    WithStyle<P, O>\n\n/**\n * An interface represent a component styled by tailwind-styled-components\n *\n * @export\n * @interface TailwindComponentBase\n * @extends {TailwindExoticComponent<TailwindPropHelper<P, O>>}\n * @template P The base react props\n * @template O The props added with the template function.\n */\nexport interface TailwindComponentBase<P extends object, O extends object = {}>\n    extends TailwindExoticComponent<TailwindPropHelper<P, O>> {\n    // add our own fake call signature to implement the polymorphic '$as' prop\n    (props: TailwindPropHelper<P, O> & { $as?: never | undefined }): React.ReactElement<TailwindPropHelper<P, O>>\n\n    <$As extends string | React.ComponentType<any> = React.ComponentType<P>>(\n        props: TailwindComponentPropsWith$As<P, O, $As>\n    ): React.ReactElement<TailwindComponentPropsWith$As<P, O, $As>>\n}\n/**\n *  An interface represent withStyle functionality\n *\n * @export\n * @interface WithStyle\n * @template P\n * @template O\n */\nexport interface WithStyle<P extends object, O extends object = {}> {\n    withStyle: <S extends object = {}>(\n        styles: CSSProperties | ((p: P & O & S) => CSSProperties)\n    ) => TailwindComponent<P, O & S>\n}\n/**\n * Generice TailwindComponent\n */\ntype AnyTailwindComponent = TailwindComponent<any, any>\n\n/**\n * A template function that accepts a template literal of tailwind classes and returns a tailwind-styled-component\n *\n * @export\n * @interface TemplateFunction\n * @template E\n */\nexport interface TemplateFunction<P extends object, O extends object = {}> {\n    (template: TemplateStringsArray): TailwindComponent<P, O>\n    (\n        template: TemplateStringsArray | InterpolationFunction<P & O>,\n        ...rest: Array<Interpolation<P & O>>\n    ): TailwindComponent<P, O>\n    <K extends object>(\n        template: TemplateStringsArray | InterpolationFunction<P & O & K>,\n        ...rest: Array<Interpolation<P & O & K>>\n    ): TailwindComponent<P, O & K>\n}\n\n/**\n * A utility function that strips out transient props from a [key,value] array of props\n *\n * @param {[string, any]} [key]\n * @return boolean\n */\nconst removeTransientProps = ([key]: [string, any]): boolean => key.charAt(0) !== \"$\"\n\nexport type TailwindComponentInnerProps<C extends AnyTailwindComponent> = C extends TailwindComponent<infer P, any>\n    ? P\n    : never\n\nexport type TailwindComponentInnerOtherProps<C extends AnyTailwindComponent> = C extends TailwindComponent<any, infer O>\n    ? O\n    : never\n\nexport type TailwindComponentAllInnerProps<C extends AnyTailwindComponent> = TailwindComponentInnerProps<C> &\n    TailwindComponentInnerOtherProps<C>\n\nexport type IntrinsicElementsTemplateFunctionsMap = {\n    [RTag in keyof JSX.IntrinsicElements]: TemplateFunction<JSX.IntrinsicElements[RTag]>\n}\n\n/**\n *\n *\n * @export\n * @interface TailwindInterface\n * @extends {IntrinsicElementsTemplateFunctionsMap}\n */\nexport interface TailwindInterface extends IntrinsicElementsTemplateFunctionsMap {\n    <C extends TailwindComponent<any, any>>(component: C): TemplateFunction<\n        TailwindComponentInnerProps<C>,\n        TailwindComponentInnerOtherProps<C>\n    >\n    <C extends React.ComponentType<any>>(component: C): TemplateFunction<\n        // Prevent functional components without props infering props as `unknown`\n        C extends (P?: never) => any ? {} : React.ComponentPropsWithoutRef<C>\n    >\n\n    <C extends keyof JSX.IntrinsicElements>(component: C): TemplateFunction<JSX.IntrinsicElements[C]>\n}\n\nconst isTw = (c: any): c is AnyTailwindComponent => c[isTwElement] === true\n\n// type FDF = React.ElementType<JSX.IntrinsicElements['div']>\n\nconst templateFunctionFactory: TailwindInterface = (<C extends React.ElementType>(Element: C): any => {\n    return (template: TemplateStringsArray, ...templateElements: ((props: any) => string | undefined | null)[]) => {\n        const TwComponentConstructor = (styleArray: (CSSProperties | ((p: any) => CSSProperties))[] = []) => {\n            // const renderFunction =\n            const TwComponent: any = React.forwardRef((baseProps: any, ref: any): JSX.Element => {\n                const { $as = Element, style = {}, ...props } = baseProps\n\n                // set FinalElement based on if Element is a TailwindComponent, $as defaults to Element if undefined\n                const FinalElement = isTw(Element) ? Element : $as\n\n                const withStyles: CSSProperties = styleArray\n                    ? styleArray.reduce<CSSProperties>(\n                          (acc, intStyle) =>\n                              Object.assign(acc, typeof intStyle === \"function\" ? intStyle(baseProps) : intStyle),\n                          {} as CSSProperties\n                      )\n                    : {}\n                // const style = TwComponent.style(props)\n\n                // filter out props that starts with \"$\" props except when styling a tailwind-styled-component\n                const filteredProps = isTw(FinalElement)\n                    ? props\n                    : (Object.fromEntries(Object.entries(props).filter(removeTransientProps)) as any)\n                return (\n                    <FinalElement\n                        // forward props\n                        {...filteredProps}\n                        style={{ ...withStyles, ...style }}\n                        // forward ref\n                        ref={ref}\n                        // set class names\n                        className={cleanTemplate(\n                            mergeArrays(\n                                template,\n                                templateElements.map((t) => t({ ...props, $as }))\n                            ),\n                            props.className\n                        )}\n                        // forward $as prop when styling a tailwind-styled-component\n                        {...(isTw(Element) ? { $as } : {})}\n                    />\n                )\n            }) as any\n            // symbol identifier for detecting tailwind-styled-components\n            TwComponent[isTwElement] = true\n            // This enables the react tree to show a name in devtools, much better debugging experience Note: Far from perfect, better implementations welcome\n            if (typeof Element !== \"string\") {\n                TwComponent.displayName = (Element as any).displayName || (Element as any).name || \"tw.Component\"\n            } else {\n                TwComponent.displayName = \"tw.\" + Element\n            }\n            TwComponent.withStyle = (styles: ((p: any) => CSSProperties) | CSSProperties) =>\n                TwComponentConstructor(styleArray.concat(styles)) as any\n\n            return TwComponent\n        }\n        return TwComponentConstructor()\n    }\n}) as any\n\nconst intrinsicElementsMap: IntrinsicElementsTemplateFunctionsMap = domElements.reduce(\n    <K extends IntrinsicElementsKeys>(acc: IntrinsicElementsTemplateFunctionsMap, DomElement: K) => ({\n        ...acc,\n        [DomElement]: templateFunctionFactory(DomElement)\n    }),\n    {} as IntrinsicElementsTemplateFunctionsMap\n)\n\nconst tw: TailwindInterface = Object.assign(templateFunctionFactory, intrinsicElementsMap)\n\nexport default tw\n", "const elementsArray: (keyof JSX.IntrinsicElements)[] = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"area\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"base\",\n    \"bdi\",\n    \"bdo\",\n    \"big\",\n    \"blockquote\",\n    \"body\",\n    \"br\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"col\",\n    \"colgroup\",\n    \"data\",\n    \"datalist\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"dialog\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"embed\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"keygen\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"map\",\n    \"mark\",\n    \"menu\",\n    \"menuitem\",\n    \"meta\",\n    \"meter\",\n    \"nav\",\n    \"noscript\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"output\",\n    \"p\",\n    \"param\",\n    \"picture\",\n    \"pre\",\n    \"progress\",\n    \"q\",\n    \"rp\",\n    \"rt\",\n    \"ruby\",\n    \"s\",\n    \"samp\",\n    \"script\",\n    \"section\",\n    \"select\",\n    \"small\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"style\",\n    \"sub\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"u\",\n    \"ul\",\n    \"var\",\n    \"video\",\n    \"wbr\",\n\n    // SVG\n    \"circle\",\n    \"clipPath\",\n    \"defs\",\n    \"ellipse\",\n    \"foreignObject\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"linearGradient\",\n    \"marker\",\n    \"mask\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"radialGradient\",\n    \"rect\",\n    \"stop\",\n    \"svg\",\n    \"text\",\n    \"tspan\"\n]\n\nexport default elementsArray\n"],
  "mappings": "qrBAAA,8BCAA,MAAqC,oBCArC,GAAM,GAAiD,CACnD,IACA,OACA,UACA,OACA,UACA,QACA,QACA,IACA,OACA,MACA,MACA,MACA,aACA,OACA,KACA,SACA,SACA,UACA,OACA,OACA,MACA,WACA,OACA,WACA,KACA,MACA,UACA,MACA,SACA,MACA,KACA,KACA,KACA,QACA,WACA,aACA,SACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,IACA,SACA,MACA,QACA,MACA,MACA,SACA,QACA,SACA,KACA,OACA,OACA,MACA,OACA,OACA,WACA,OACA,QACA,MACA,WACA,SACA,KACA,WACA,SACA,SACA,IACA,QACA,UACA,MACA,WACA,IACA,KACA,KACA,OACA,IACA,OACA,SACA,UACA,SACA,QACA,SACA,OACA,SACA,QACA,MACA,UACA,MACA,QACA,QACA,KACA,WACA,QACA,KACA,QACA,OACA,QACA,KACA,QACA,IACA,KACA,MACA,QACA,MAGA,SACA,WACA,OACA,UACA,gBACA,IACA,QACA,OACA,iBACA,SACA,OACA,OACA,UACA,UACA,WACA,iBACA,OACA,OACA,MACA,OACA,SAGG,EAAQ,EDzIf,MAAwB,0BAElB,EAAc,OAAO,gBAiBd,EAAc,CAAC,EAAgC,IACjD,EAAS,OACZ,CAAC,EAAK,EAAG,IAAM,EAAI,OAAO,GAAK,GAAI,EAAiB,IAAM,IAC1D,IAIK,EAAgB,CAAC,EAAqC,EAA2B,KAAO,CACjG,GAAM,GAAuB,EACxB,KAAK,KACL,OACA,QAAQ,MAAO,KACf,QAAQ,UAAW,KACnB,MAAM,KACN,OAAO,AAAC,GAAM,IAAM,KAEnB,EAAkC,EAAmB,EAAiB,MAAM,KAAO,GAEzF,MAAO,cACH,GAAG,EACE,OAAO,GACP,OAAO,AAAC,GAAc,IAAM,OAiHnC,EAAuB,CAAC,CAAC,KAAiC,EAAI,OAAO,KAAO,IAqC5E,EAAO,AAAC,GAAsC,EAAE,KAAiB,GAIjE,EAA8C,AAA8B,GACvE,CAAC,KAAmC,IAAoE,CAC3G,GAAM,GAAyB,CAAC,EAA8D,KAAO,CAEjG,GAAM,GAAmB,UAAM,WAAW,CAAC,EAAgB,IAA0B,CACjF,GAAM,CAAE,MAAM,EAAS,QAAQ,MAAO,GAAU,EAG1C,EAAe,EAAK,GAAW,EAAU,EAEzC,EAA4B,EAC5B,EAAW,OACP,CAAC,EAAK,IACF,OAAO,OAAO,EAAK,MAAO,IAAa,WAAa,EAAS,GAAa,GAC9E,IAEJ,GAIA,EAAgB,EAAK,GACrB,EACC,OAAO,YAAY,OAAO,QAAQ,GAAO,OAAO,IACvD,MACI,yBAAC,EAAD,IAEQ,EACJ,MAAO,IAAK,KAAe,GAE3B,IAAK,EAEL,UAAW,EACP,EACI,EACA,EAAiB,IAAI,AAAC,GAAM,EAAE,IAAK,EAAO,UAE9C,EAAM,cAGL,EAAK,GAAW,CAAE,OAAQ,OAK3C,SAAY,GAAe,GAE3B,AAAI,MAAO,IAAY,SACnB,EAAY,YAAe,EAAgB,aAAgB,EAAgB,MAAQ,eAEnF,EAAY,YAAc,MAAQ,EAEtC,EAAY,UAAY,AAAC,GACrB,EAAuB,EAAW,OAAO,IAEtC,GAEX,MAAO,MAIT,EAA8D,EAAY,OAC5E,CAAkC,EAA4C,IAAmB,KAC1F,GACF,GAAa,EAAwB,KAE1C,IAGE,EAAwB,OAAO,OAAO,EAAyB,GAE9D,EAAQ",
  "names": []
}
